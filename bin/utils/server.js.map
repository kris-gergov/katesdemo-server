{"version":3,"sources":["../../src/utils/server.ts"],"sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport * as OpenApiValidator from 'express-openapi-validator';\r\nimport { Express } from 'express-serve-static-core';\r\nimport { connector, summarise } from 'swagger-routes-express';\r\nimport YAML from 'yamljs';\r\nimport morgan from 'morgan';\r\nimport morganBody from 'morgan-body';\r\n\r\nimport config from '@/config';\r\nimport * as api from '@controllers/index';\r\nimport { expressDevLogger } from './express_dev_logger';\r\n\r\nexport async function createServer(): Promise<Express> {\r\n  const yamlSpecFile = './config/openapi.yml';\r\n  const apiDefinition = YAML.load(yamlSpecFile);\r\n  const apiSummary = summarise(apiDefinition);\r\n  console.info(apiSummary);\r\n  console.info('-----');\r\n  console.info(\"CONFIG\", config);\r\n\r\n  const server = express();\r\n\r\n  // here we can intialize body/cookies parsers, connect logger, for example morgan\r\n  server.use(bodyParser.json());\r\n\r\n  if (config.morganLogger) {\r\n    server.use(morgan(':method :url :status :response-time ms - :res[content-length]'));\r\n  }\r\n\r\n  if (config.morganBodyLogger) {\r\n    morganBody(server);\r\n  }\r\n\r\n  if (config.exmplDevLogger) {\r\n    server.use(expressDevLogger);\r\n  }\r\n\r\n  // setup API validator\r\n  const validatorOptions = {\r\n    apiSpec: yamlSpecFile,\r\n    validateRequests: true,\r\n    validateResponses: true,\r\n  };\r\n\r\n  server.use(OpenApiValidator.middleware(validatorOptions));\r\n\r\n  // error customization, if request is invalid\r\n  server.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n    res.status(err.status).json({\r\n      error: {\r\n        type: 'request_validation',\r\n        message: err.message,\r\n        errors: err.errors,\r\n      },\r\n    });\r\n  });\r\n\r\n  const connect = connector(api, apiDefinition, {\r\n    onCreateRoute: (method: string, descriptor: any[]) => {\r\n      descriptor.shift();\r\n      console.log(`${method}: ${descriptor.map((d: any) => d.name).join(', ')}`);\r\n    },\r\n    security: {\r\n      bearerAuth: api.auth,\r\n    },\r\n  });\r\n\r\n  connect(server);\r\n\r\n  return server;\r\n}\r\n"],"names":["createServer","OpenApiValidator","api","yamlSpecFile","apiDefinition","YAML","load","apiSummary","summarise","console","info","config","server","express","use","bodyParser","json","morganLogger","morgan","morganBodyLogger","morganBody","exmplDevLogger","expressDevLogger","validatorOptions","apiSpec","validateRequests","validateResponses","middleware","err","req","res","next","status","error","type","message","errors","connect","connector","onCreateRoute","method","descriptor","shift","log","map","d","name","join","security","bearerAuth","auth"],"mappings":"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"}